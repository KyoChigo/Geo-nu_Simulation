%function test = Abundance_And_Flux(index, iteration, name_layer, simple2, lithosphere, detector, template, Elements, Geonu)
function test = Abundance_And_Flux(index, iteration, name_layer, lithosphere, Elements, Geonu)
%%%%%%% Get layer according name_layer from lithosphere %%%%%%%%%%%%%%%%%
if strcmp('s1', name_layer)
    layer = lithosphere.Model_Data.s1;
    Input = lithosphere.Layers.s1;
    Cor = lithosphere.Cor.s1;
elseif strcmp('s2', name_layer)
    layer = lithosphere.Model_Data.s2;
    Input = lithosphere.Layers.s2;
    Cor = lithosphere.Cor.s2;
elseif strcmp('s3', name_layer)
    layer = lithosphere.Model_Data.s3;
    Input = lithosphere.Layers.s3;
    Cor = lithosphere.Cor.s3;
elseif strcmp('UC', name_layer)
    layer = lithosphere.Model_Data.UC;
    Input = lithosphere.Layers.UC;
    Cor = lithosphere.Cor.UC;
elseif strcmp('MC', name_layer) | strcmp('MC_OC', name_layer)
    layer = lithosphere.Model_Data.MC;
    Input = lithosphere.Layers.MC;
    Cor = lithosphere.Cor.MC;
elseif strcmp('LC', name_layer) | strcmp('LC_OC', name_layer)
    layer = lithosphere.Model_Data.LC;
    Input = lithosphere.Layers.LC;
    Cor = lithosphere.Cor.LC;
elseif strcmp('LM', name_layer) | strcmp('LM_OC', name_layer)
    layer = lithosphere.Model_Data.LM;
    Input = lithosphere.Layers.LM;
    Cor = lithosphere.Cor.LM;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if layer.thick(index) == 0
    template_zeros = zeros(1, 3);
    Abundance.Mass.Mass = template_zeros;
    Abundance.Mass.U = template_zeros;
    Abundance.Mass.Th = template_zeros;
    Abundance.Mass.K = template_zeros;
    Abundance.Heat_Power.U = template_zeros;
    Abundance.Heat_Power.Th = template_zeros;
    Abundance.Heat_Power.K = template_zeros;
    Abundance.Heat_Power.Total = template_zeros;
    Abundance.Heat_Flux = template_zeros;

    % Other Codes
%%%%%% Test
    test = 0;
    return % skip remain of this funciton
end

GeoPhys = Get_GeoPhys(lithosphere);
surface_radius = GeoPhys.r(index);
clear GeoPhys;
%%%%%%% Convert abundance of K to K40
layer.Abundance.K40(index, :) = Input.Abundance.K(index, :) * Elements.Potassium.K40.Relative_Abundance.Mass; % Convert into K40 by mass fraction
%%%%%%% Get the boundaries of cell
lon_left = layer.lon(index) - 0.5;
lon_right = layer.lon(index) + 0.5;
lat_bottom = layer.lat(index) - 0.5;
lat_top = layer.lat(index) + 0.5;
arc = pi / 180;
%%%%%%% Compute the area of this surface cell
area_surface_cell = surface_radius^2 * (lon_right - lon_left) * arc * ( sin(lat_top * arc) -  sin(lat_bottom * arc));
%%%%%%%
abundance_mass = nan(iteration, 3); % A matrix with iteration * 3, all elements are "Not a Number"
%%%%%%% Geo-nu Flux
Flux = zeros(1, length(Geonu.Energy.Energy_Bins));
test = area_surface_cell;



%%%%%%% LM in Crust1 and Crust2
% Unit: m
temp = strcmp('Crust1', lithosphere.Model_Name) + strcmp('Crust2', lithosphere.Model_Name);
uncertainty = 0.12; % Uncertainty of thickness

if strcmp('LM', name_layer) && temp == 1
    LAB = Generate_Random_Normal(175000,75000,0,Cor.Thickness);
    temp_2 = lithosphere.Model_Data.Crust1.moho(index);
    Moho = Generate_Random_Normal(temp_2, temp_2 * uncertainty, 0, Cor.Thickness);
    thickness = LAB - Moho;
    thickness( thickness < 0 ) = 0;
else
    % Other layes or LM in LITHO1
    temp_2 = layer.thick(index);
    thickness = Generate_Random_Normal(temp_2, temp_2 * uncertainty , 0, Cor.Thickness);
    thickness( thickness < 0) = 0;
end
%%%%%%% Depth of center of layer
% Unit: m
temp_2 = layer.depth(index);
depth = Generate_Random_Normal(temp_2, temp_2 * uncertainty, 0, Cor.Thickness);
depth( depth < 0) = 0;
%%%%%%% Density of layer
temp_2 = layer.rho(index);
density = Generate_Random_Normal(temp_2, temp_2 * uncertainty, 0, Cor.Vp);
density( density < 0) = 0;
density
%%%%%%%%%%%%%%%%%%% Test
    test = 0;